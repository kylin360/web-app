services:
  # MySQL 数据库服务
  mysql:
    image: mysql:5.7
    container_name: cross_border_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-cross_border_calc}
      MYSQL_USER: ${MYSQL_USER:-cross_border}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-cross_border123}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    networks:
      - cross_border_network
    command: --default-authentication-plugin=mysql_native_password

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: cross_border_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - cross_border_network

  # PHP-FPM 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/php/Dockerfile
    container_name: cross_border_backend
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./backend:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE:-cross_border_calc}
      - DB_USER=${MYSQL_USER:-cross_border}
      - DB_PASSWORD=${MYSQL_PASSWORD:-cross_border123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - YII_ENV=${YII_ENV:-dev}
      - YII_DEBUG=${YII_DEBUG:-1}
    depends_on:
      - mysql
      - redis
    networks:
      - cross_border_network

  # Nginx Web服务器
  nginx:
    image: nginx:1.25-alpine
    container_name: cross_border_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - cross_border_network

  # 前端开发服务器 
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/node/Dockerfile
    container_name: cross_border_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-KylinApp}
    depends_on:
      - backend
    networks:
      - cross_border_network
    command: npm run dev



  # 邮件服务 (可选，用于发送通知)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: cross_border_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - cross_border_network

  # 监控服务 (可选)
  adminer:
    image: adminer:4.8.1
    container_name: cross_border_adminer
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
    depends_on:
      - mysql
    networks:
      - cross_border_network

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./database/mysql
  redis_data:
    driver: local

networks:
  cross_border_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
